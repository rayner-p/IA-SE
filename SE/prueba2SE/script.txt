LOAD CSV FROM 'file:///carros_data.csv' AS line
CREATE  (:Carros{ marca: line[0], modelo: line[1], fuel_type: line[2], aspiration: line[3], num_of_doors: line[4], estilo: line[5], drive_wheels: line[6], engine_location: line[7], wheel_base: toFloat(line[8]), largo: toFloat(line[9]), ancho: toFloat(line[10]), alto: toFloat(line[11]), curb_weight: line[12], engine_type: line[13], num_of_cylinders: line[14], engine_size: toFloat(line[15]), fuel_system: line[16], compression_ratio: toFloat(line[17]), horsepower: toFloat(line[18]), peak_rpm: toFloat(line[19]), city_mpg: toFloat(line[20]), highway_mpg: toFloat(line[21]), price: toFloat(line[22])})



MATCH (c:Carros)
 WITH {item:id(c), weights: apoc.convert.toIntList(c.price)} AS userData
 WITH collect(userData) AS valorPrecio
 CALL gds.alpha.similarity.euclidean.stream({
  data: valorPrecio,
  skipValue: null
 })
 YIELD item1, item2,count1, count2, similarity
 RETURN gds.util.asNode(item1).marca AS from, gds.util.asNode(item2).marca AS to, similarity
 ORDER BY similarity DESC



CALL gds.graph.create(
    'k1Localidad',
    {
        Carros : {
            label: 'Carros',
            properties: 'price'
        }
    },
    '*'
);

CALL gds.graph.create(
    'k1Localidad',
    {
        Carros : {
            label: 'Carros',
            properties: ‘horsepower’
        }
    },
    '*'
);

CALL gds.beta.knn.write.estimate('k1Localidad', {
  nodeWeightProperty: 'price',
  writeRelationshipType: 'Carros',
  writeProperty: 'score',
  topK: 1
})
YIELD nodeCount as nodos, bytesMin , bytesMax, requiredMemory as memoriaRequerida


CALL gds.beta.knn.stream('k1Localidad', {topK: 2, randomSeed: 42, nodeWeightProperty: 'horsepower'})
YIELD node1, node2, similarity
RETURN gds.util.asNode(node1).marca AS Marca1, gds.util.asNode(node2).modelo AS Modelo, similarity AS Similitud
ORDER BY Similitud ASCENDING, Marca1, Modelo


CALL gds.beta.knn.stream('k1Localidad', {topK: 2, randomSeed: 42, nodeWeightProperty: 'price'})
YIELD node1, node2, similarity
RETURN gds.util.asNode(node1).marca AS Marca1, gds.util.asNode(node2).marca AS Marca2, similarity AS Similitud
ORDER BY Similitud ASCENDING, Marca1, Marca2



CALL gds.beta.knn.stream('k1Localidad', {topK: 2,sampleRate: 1 , randomSeed: -1, nodeWeightProperty: 'price'})
YIELD node1, node2, similarity
RETURN gds.util.asNode(node1).modelo AS Modelo, gds.util.asNode(node2).modelo AS Modelo2, similarity AS Similitud
ORDER BY Similitud ASCENDING, Modelo, Modelo2



CALL gds.beta.knn.stream('k1Localidad', {topK: 5,sampleRate: 1 , randomSeed: -1, nodeWeightProperty: 'horsepower'})
YIELD node1, node2, similarity
RETURN gds.util.asNode(node1).marca AS Modelo, gds.util.asNode(node2).marca AS Modelo2, similarity AS Similitud
ORDER BY Similitud ASCENDING, Modelo, Modelo2
